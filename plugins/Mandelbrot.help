///////////////////////////////////////////////////////////////////////////////
// Fractal Wizard -- a free fractal renderer for Linux
// Copyright (C) 1987-2005  Thomas Okken
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License, version 2,
// as published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307  USA
///////////////////////////////////////////////////////////////////////////////

static const char *helptext =
  "------------------------------ Mandelbrot (MS) ------------------------------"
"\n"
"\nThis EDP computes images of the Mandelbrot Set using the Mariani-Silver"
"\nalgorithm. This algorithm is based on the assumption that a rectangle in the"
"\ncomplex plane, whose outline is all the same colour, must be entirely of that"
"\ncolour. It then becomes possible to colour the interior of the rectangle"
"\nwithout calculating its pixels."
"\nThis algorithm is not guaranteed to give correct images of the Mandelbrot Set -"
"\nthat is, the assumption above is not generally true when the complex plane is"
"\nonly sampled in a discrete fashion - but you will find that it works nicely all"
"\nthe same."
"\n"
"\nThe implementation works as follows:"
"\n* To colour a rectangle, scan the center point and all four corners. Then scan"
"\n  all the edges. If any sampled pixel has a different colour than the center"
"\n  one, split the rectangle into four equal parts and retry the procedure on"
"\n  each quarter separately."
"\n* If a rectangle's outline and center point all have the same pixel value, fill"
"\n  the rectangle entirely with this colour."
"\n* If a rectangle that is less than 5 pixels wide or high is encountered in this"
"\n  procedure, calculate all its pixels individually (do not recurse further)."
"\n* Before calculating a pixel value (that is, applying the z := z^2 + c"
"\n  iteration to it), check the pixel map to see if it has been calculated"
"\n  already. Unknown pixels are recognized by their value (0 in 8-bit mode, $FFFF"
"\n  in 16-bit mode); if a pixel has been calculated, it has a value ranging from"
"\n  1 to 255 in 8-bit mode, and from 0 to the iteration limit in 16-bit mode."
"\n* The iteration routine is written in assembly language for maximum speed, as"
"\n  is the rectangle fill routine. According to the required accuracy, fixed or"
"\n  floating point calculation modes are used, as in the standard \"Mandelbrot\""
"\n  EDP."
"\n* Because the algorithm must be able to get information from the pixel map, to"
"\n  see whether a pixel has already been calculated, black and white operation is"
"\n  not supported. In a bitmap, each pixel can have only two different values, so"
"\n  you could only generate solid black images, since white has a special"
"\n  meaning."
"\n* Apart from the only-colour restriction, this EDP is used exactly like"
"\n  Mandelbrot."
"\n"
"\n"
"\n--------------------------------- Mandelbrot ---------------------------------"
"\n"
"\nWHAT IS MANDELBROT?"
"\n"
"\nMandelbrot is one of the standard set of EDPs for Fractal Wizard. It allows you"
"\nto generate images of the Mandelbrot Set, using a very fast assembly-language"
"\nimplementation of the Escape Time algorithm."
"\nMandelbrot does its calculations on the 68020, using 32-bit fixed-point"
"\narithmetic, with 24 bits for the fractional part. This is about 3.5 times"
"\nfaster than using the 68881. (Figures for a vanilla Mac II; your mileage may"
"\nvary.)"
"\nWhen the magification becomes greater that 2 ^ -24 units per pixel, fixed-point"
"\nbecomes too inaccurate, and Mandelbrot starts using the FPU. The FPU is also"
"\nused when 'Limit' is set > 2, to avoid fixed-point overflows."
"\n"
"\nTHE MANDELBROT SET"
"\n"
"\nThe Mandelbrot Set is a mathematical object to be found in the complex plane."
"\nIt is defined as the collection of values c (in C), for which the following is"
"\ntrue:"
"\n"
"\n  z[0] = 0"
"\n  z[i] = z[i-1] ^ 2 + c for all i > 0"
"\n  lim (i->inf) z[i] != inf"
"\n"
"\n(Excuse the sloppy notation; I guess the meaning is clear.)"
"\nIt turns out that whenever | z[i] | > 2, the iteration will go to infinity, so"
"\nthe last condition can be changed to:"
"\n"
"\n  | z[i] | <= 2 for all i > 0"
"\n"
"\n"
"\nTHE ESCAPE TIME ALGORITHM"
"\n"
"\nSince it is impossible to carry out an infinite number of iterations to see"
"\nwhether z[i] remains bounded, a limit is imposed on the number of iterations."
"\nThe higher this limit, the more accurate the image of the Mandelbrot Set will"
"\nbecome."
"\nThe real beauty of Mandelbrot Set is not the set itself, but the 'level sets'"
"\naround it. The nth level set is defined as the set of points for which"
"\n"
"\n  | z[n] | > 2"
"\n  | z[i] | <= 2 for 0 >= i > n"
"\n"
"\nBy making the Mandelbrot Set itself black, and assigning different colours to"
"\neach level set, the colourful images you may already be familiar with are"
"\ncreated. To create an image of the set, you supply the boundaries of a"
"\nrectangle in the complex plane, by setting the fields 'Real (or Imaginary) Axis"
"\nLow (or High)'. The size of the image is set with the 'Image Width' and 'Image"
"\nHeight' settings, both in pixels."
"\nWith these data, the complex coordinates corresponding to every pixel can be"
"\ncalculated, which are then fed, as the c-value, into the Escape Time algorithm."
"\nYou can set the maximum number of iterations in the 'Max. Iterations' field."
"\nYou can also change the limit for z at which the iteration stops. The default"
"\nis 2, as in the above explanation, but using a higher value improves the"
"\nrendering of the level sets. In theory, 'Limit' should be inf for true level"
"\nsets, but a value of 100 is high enough to make virtually no difference."
"\n"
"\nSPECIAL EFFECTS"
"\n"
"\n- 8-Bit pictures -"
"\nWhen the number of iterations ued is very high, you will notice that a large"
"\nproportion of the colours in your palette remains unused. The cause of this is"
"\nthat the level sets close to the Mandelbrot Set take up many colours, while"
"\nthey are so thin you hardly see them. One thing you can do to remedy this is"
"\nmagnify the image, but you will find that the maximum number of iterations has"
"\nto be raised at greater magnifications, so you would be back where you started."
"\nThe other option is to increase the 'Colour Bands' setting. If you set it to"
"\n10, for example, the set of colours will be mapped 10 times over the range of"
"\npossible iterations, so at 2500 iterations, each level set will be"
"\ndistinguishable from its neighbour. Keeping this setting in step with the 'Max."
"\nIterations' setting produces the best results. (This means, if you zoom in on a"
"\npicture and raise the number of iterations by a factor of 5, you should also"
"\nincrease 'Colour Bands' fivefold. It is best to experiment with this and see"
"\nwhat happens.)"
"\n"
"\n- Black and White pictures -"
"\nThe 'Colour Bands' setting is also used for black and white pictures. It"
"\nspecifies the number of successive level sets that are given the same colour."
"\nThe default setting of 1 will cause excessive detail near the Mandelbrot Set to"
"\ncause noise in the picture. Raising 'Colour Bands' by a factor of 2_10 will"
"\nimprove noisy pictures considerably."
"\n"
"\n- 16-Bit pictures -"
"\nThe 'Colour Bands' setting has no effect in 16-bit mode; in this mode, the"
"\nnumber of iterations is put into the pixel directly."
"\n"
"\n- Distorted pictures -"
"\nAs mentioned before, 2 is the lowest setting for 'Limit' which will reproduce"
"\nthe Mandelbrot Set accurately (to get accurate level sets, it should be much"
"\nhigher). Setting 'Limit' to a value less than 2 can create quite beautiful and"
"\nstartling images, though these are not really images of the Mandelbrot Set."
"\nYou may set 'Limit' to a negative value, but as its absolute value is used,"
"\nthis will have no effect."
"\n"
"\nREFERENCES"
"\n"
"\n\"The Fractal Geometry of Nature,\" by B. B. Mandelbrot"
"\n    W. H. Freeman and Co., New York, 1982"
"\n\"Computer Recreations: A computer microscope zooms in for a look at the most"
"\ncomplex object in mathematics,\" by A. K. Dewdney"
"\n    Scientific American v253n2pp8-12, Scientific American, Inc., August 1985"
"\n\"The Beaty of Fractals,\" by H.-O. Peitgen and P. H. Richter"
"\n    Springer Verlag, Berlin, Heidelberg, 1986"
"\n\"The Science of Fractal Images,\" H.-O. Peitgen and D. Saupe (editors)"
"\n    Springer Verlag, New York, 1988"
"\n-------------------------------------------------------------------------------";
