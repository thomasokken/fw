The UndoManager should operate at the Viewer level. Colormap changes made in
the Colormap Editor should not be private to the Colormap Editor. In other
words, after dismissing a CME by pressing OK, all the changes you made should
still be undoable -- and while we're at it, after dismissing a CME by pressing
Cancel, all the changes you made should still be REdoable. And when you bring
up another CME, you should be able to use it to peer at all those changes close
up. So, the CME is merely a window on pm.cmap, which is allowed to add
colormap-changing actions to the Viewer's UndoManager.
All actions should handle the new viewer.dirty flag, so we can get proper "Save
changes before quitting/closing" behavior implemented.

ColorPicker: when constraining HSL coordinates (the MotionNotify case), make
sure the actual screen coordinates (cross_[xy], slider_x) are also constrained!

Take another careful look at the colormap editor. It needs a tidy API for
the *Actions to control it by: changing the selection, changing color cell
values; CME should repaint as necessary (which it may not be; if using a
private colormap, repainting is only needed when the selection changes)
and select_cell() etc. should not appear in the Actions.

The new Newton and Polynomial plugins don't use the 'bands' setting yet.
Newton, Polynomial, Julia, Ramp: implement init_clone().

Why does gif2tiff crash on newton.gif? Everybody else (fw itself, xv,
giftopnm, Mozilla, IE, WinJPEG, xpaint) seems to like it just fine.
Maybe it's a gif2tiff bug... Then again I'd feel a lot better if I had some
source where the *precise* details of when to send clear codes and when to
switch code sizes were documented. Writing ImageIO_GIF has felt a lot like
flying blind at times. I guess I should be thankful that it works as well as it
does now, but still, stuff like the gif2tiff problem just makes me wonder what
other surprises are still lurking in that code.
I know, I know, don't use GIF, use PNG. :-)

In SaveImageDialog, using the 'type' menu tends to mess up input focus (you
can't set focus on a text field any more). Am I doing something wrong there, or
is this an OpenMotif 2.2.2 bug? Take a look at...

	http://www.motifdeveloper.com/tips/tip22.html
        http://www.motifdeveloper.com/tips/Motif22Review.pdf

In the Color Picker and Colormap Editor, the focus disappears at one point in
the tabbing sequence. Where does it go? And more importantly, how do we get it
to not do that? Also, in the colormap editor, the tabbing sequence is wrong.
(Which, BTW, would be fixed if only I could convince the rowcolumn widget to
lay out its children left-to-right first. It should be able to do that, no? Is
this an Open Motif bug? See above.)

The code that draws the color wheel in ColorPicker uses unhealthy amouts of
transcendental functions (rectangular -> polar coordinate transformation), and
it is pathetically slow. Can't we fudge this with some fast, limited-precision
approximations for sqrt() and atan2()?
Or just cache an (x, y) -> (H, S) translation table... about 200K...
Or is the slowness not due to the FP math, but to the re-generating and re-
displaying of the color wheel? Hmmm...

The SettingsDialog code should receive focus notifications, and invoke
PluginSettings::fieldChanged() immediately (if the field has, in fact,
changed!), rather than putting it all off until the ok() callback.
Also, PluginSettings::fieldChanged() should return a bool saying whether a
change is vetoed or not. If vetoed, the focus could return to the offending
field, or the offending field could be highlighted (e.g. red background), or
something along those lines. Also, the OK action should be prevented when a
field has an error. (Cancel should always be allowed.)

In paint_reduced(), the code for displaying 8-bit colormapped images when a
private colormap is in effect, is painfully slow. Finding the closest match for
a color within an arbitrary set of colors is the problem. The current
implementation is totally naive... Even if a brute-force search really can't be
avoided, that code still wants some optimizing.

Fix the tabbing order in SettingsDialog (should traverse the bit depth radio
buttons *before* the group of pushbuttons in the lower right corner). Is the
order currently governed by the order in which the widgets were added to the
container? May not be possible to change the order in which the widgets are
added to the container, because of the XmForm constraints... But the tabbing
order can be overridden using some resource. Check xmlgui if unsure; I seem to
remember doing just that right there.
